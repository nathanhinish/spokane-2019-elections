{"version":3,"sources":["OverTime.js","App.js","serviceWorker.js","index.js"],"names":["THead","candidates","map","c","i","key","Candidates","Table","header","rows","RaceTable","race","Object","keys","Data","rowData","date","counts","cand","count","push","t","sum","id","pcts","Math","round","Dates","prevRow","p","className","Races","OverTime","races","r","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8hHAQA,SAASA,EAAT,GAAgC,IAAfC,EAAc,EAAdA,WACf,OACE,+BACE,4BACE,oCACCA,EAAWC,KAAI,SAACC,EAAGC,GAAJ,OACd,wBAAIC,IAAG,WAAMD,IAAME,EAAWH,SAOxC,SAASI,EAAT,GAAkC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KACvB,OACE,+BACGD,EACD,+BAAQC,IAKd,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,KACbV,EAAaW,OAAOC,KAAKC,EAAKH,IAC9BH,EAAS,kBAACR,EAAD,CAAOC,WAAYA,IAE5Bc,EAAU,GAJW,uBAK3B,IAL2B,IAK3B,EAL2B,iBAKhBC,EALgB,QAMnBC,EAAS,GANU,uBAQzB,YAAmBhB,EAAnB,+CAA+B,CAAC,IAArBiB,EAAoB,QACvBC,EAAQL,EAAKH,GAAMO,GAAMF,GAC/BC,EAAOG,KAAKD,IAVW,kFAYzB,IAAME,EAAIC,cAAIL,GAIdF,EAAQK,KAAK,CACXG,GAAIP,EACJA,KAAK,MAAD,OAAQA,GACZQ,KAAMP,EAAOf,KALA,SAAAC,GAAC,OAAIsB,KAAKC,MAAOvB,EAAIkB,EAAK,KAAU,UATrD,EAAmBM,EAAnB,+CAA2B,IALA,kFAuB3B,IAAMlB,EAAOM,EAAQb,KAAI,WAAmBE,GAAO,IAC7CwB,EADqBL,EAAuB,EAAvBA,GAAIP,EAAmB,EAAnBA,KAAMQ,EAAa,EAAbA,KAMnC,OAJIpB,EAAI,IACNwB,EAAUb,EAAQX,EAAI,IAItB,wBAAIC,IAAG,cAASkB,IACd,4BAAKP,GACJQ,EAAKtB,KAAI,SAAC2B,EAAGzB,GACZ,IAAI0B,EAAY,GAChB,GAAIF,EACF,QAAQ,GACN,KAAKA,EAAQJ,KAAKpB,GAAKyB,EACrBC,EAAY,YACZ,MACF,KAAKF,EAAQJ,KAAKpB,GAAKyB,EACrBC,EAAY,YACZ,MACF,QACAA,EAAY,YAGhB,OAAO,wBAAIzB,IAAG,WAAMW,GAAN,OAAaZ,GAAK0B,UAAWA,GAAYD,UAM/D,OACE,6BACE,4BAAKE,EAAMpB,IACX,kBAACJ,EAAD,CAAOC,OAAQA,EAAQC,KAAMA,KAKpB,SAASuB,IACtB,IAAMC,EAAQrB,OAAOC,KAAKC,GAC1B,OACE,oCACGmB,EAAM/B,KAAI,SAACgC,EAAG9B,GAAJ,OACT,kBAACM,EAAD,CAAWC,KAAMuB,EAAG7B,IAAG,eAAUD,SCnF1B+B,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAACE,EAAD,QCKcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.afa3b401.chunk.js","sourcesContent":["import React from \"react\";\nimport { sum } from \"lodash\";\n\nimport Data from \"./data/race-candidate-date-total.json\";\nimport Dates from \"./data/dates.json\";\nimport Races from \"./data/race-map.json\";\nimport Candidates from \"./data/candidate-map.json\";\n\nfunction THead({ candidates }) {\n  return (\n    <thead>\n      <tr>\n        <th>Date</th>\n        {candidates.map((c, i) => (\n          <th key={`c${i}`}>{Candidates[c]}</th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nfunction Table({ header, rows }) {\n  return (\n    <table>\n      {header}\n      <tbody>{rows}</tbody>\n    </table>\n  );\n}\n\nfunction RaceTable({ race }) {\n  const candidates = Object.keys(Data[race]);\n  const header = <THead candidates={candidates} />;\n\n  const rowData = [];\n  for (const date of Dates) {\n    const counts = [];\n\n    for (const cand of candidates) {\n      const count = Data[race][cand][date];\n      counts.push(count);\n    }\n    const t = sum(counts);\n\n    const getPct = c => Math.round((c / t) * 100000) / 1000;\n\n    rowData.push({\n      id: date,\n      date: `11/${date}`,\n      pcts: counts.map(getPct)\n    });\n  }\n\n  const rows = rowData.map(({id, date, pcts}, i) => {\n    let prevRow;\n    if (i > 0) {\n      prevRow = rowData[i - 1];\n    }\n\n    return (\n      <tr key={`row_${id}`}>\n        <th>{date}</th>\n        {pcts.map((p, i) => {\n          let className = '';\n          if (prevRow) {\n            switch (true) {\n              case prevRow.pcts[i] > p:\n                className = 'decreased';\n                break;\n              case prevRow.pcts[i] < p:\n                className = 'increased';\n                break;\n              default: \n              className = 'unchanged';\n            }\n          }\n          return <td key={`c${date}${i}`} className={className}>{p}</td>\n        })}\n      </tr>\n    );\n  });\n\n  return (\n    <div>\n      <h3>{Races[race]}</h3>\n      <Table header={header} rows={rows} />\n    </div>\n  );\n}\n\nexport default function OverTime() {\n  const races = Object.keys(Data);\n  return (\n    <>\n      {races.map((r, i) => (\n        <RaceTable race={r} key={`table${i}`} />\n      ))}\n    </>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport OverTime from './OverTime';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <OverTime />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}